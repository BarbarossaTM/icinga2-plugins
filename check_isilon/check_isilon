#!/usr/bin/env python3
#
# Maximilian Wilhelm <max@sdn.clinic>
#  --  Sat, 20 Feb 2021 16:03:12 +0100
#

import argparse
import base64
import json
import requests
import sys
import time

# Exit code definitions
OK = 0
WARNING = 1
CRITICAL = 2
UNKNOWN = 3

################################################################################
#                         Helper and check methods                             #
################################################################################

def query_api (url, auth):
	r = requests.get (url, auth = auth, verify = tls_cacert_dir)

	if r.status_code != 200:
		print ("UNKNOWN: Query to %s failed: %s" % (url, "error"))
		sys.exit (UNKNOWN)

	res_json = r.json ()

	return res_json


def convert_time (epoch):
	try:
		t = time.localtime (int (epoch))
		return time.strftime ("%a %d.%m.%Y %H:%M:%S", t)
	except ValueError:
		return "unknown"


def check_events (data):
	ret_code = OK
	msg = ""
	perf_data = []

	for evl in data['eventlists']:
		event = evl['events'][0]

		# Event has been resolved, go on
		if event['resolve_time'] != 0:
			continue

		# Format message like "(Critical|Warning) on (Node NN|Cluster): $msg"
		sev = event['severity']
		scope = "node %s" % event['lnn'] if event['lnn'] != 0 else "cluster"
		msg += "%s on %s: %s\n" % (sev.capitalize (), scope, event['message'])

		# Store worst severity
		if sev == 'warning' and ret_code < WARNING:
			ret_code = WARNING
		elif sev == 'critical' and ret_code < CRITICAL:
			ret_code = CRITICAL

	if ret_code == OK:
		msg = "No active events"

	return (ret_code, msg, perf_data)


def check_storagepools (data):
	ret_code = OK
	msg = ""
	perf_data = []

	for np in data['nodepools']:
		name = np['name']

		# This pool isn't formed yet, nothing we can do
		if name.startswith ('unprovisioned_pool'):
			if args.ignore_unprovisioned:
				continue

			perf_data.append ("'%s'=%sB;%d;%d;0;%s" % (
				name,
				0,
				0,
				0,
				0
			))

			continue


		for storage_type in ('hdd', 'ssd'):
			usage = int (np['usage']['used_%s_bytes' % storage_type])
			warn = int (float (np['usage']['usable_%s_bytes' % storage_type]) * 0.75)
			crit = int (float (np['usage']['usable_%s_bytes' % storage_type]) * 0.88)
			size = np['usage']['usable_%s_bytes' % storage_type]

			if size == "0":
				continue

			if usage > crit:
				ret_code = CRITICAL
				msg += " Pool %s is over 85%% full!" % name

			elif usage > warn and ret_code < CRITICAL:
				ret_code = WARNING
				msg += " Pool %s is over 75%% full!" % name

			perf_data.append ("'%s-%s'=%sB;%d;%d;0;%s" % (
				name,
				storage_type,
				usage,
				warn,
				crit,
				size
			))

	if ret_code == OK:
		msg = "Pools OK"

	return (ret_code, msg, perf_data)


def check_synciq (data):
	ret_code = OK
	msg = ""
	perf_data = []
	errors = ""

	policies = 0

	for policy in data['policies']:
		if policy['enabled'] == 'false':
			continue

		policies += 1

		# Gather some relevant attributes
		last_job_state = policy['last_job_state']
		last_started = convert_time (policy['last_started'])
		last_success = convert_time (policy['last_success'])
		next_run = convert_time (policy['next_run'])

		# Append to msg or errors depending on state
		newmsg = "Policy %s %s, policy was last started %s, last successful run was %s, next run is scheduled for %s\n" % (
			policy['name'],
			last_job_state,
			last_started,
			last_success,
			next_run)

		if last_job_state in ("failed"):
			ret_code = CRITICAL
			last_job_state = last_job_state.upper ()
			errors += newmsg
		else:
			msg += newmsg


	# No enabled policy configured at all?
	if policies == 0 and ret_code < 1:
		ret_code = 1
		msg = "No enabled policy configured, is this what you want?"

	msg = errors + msg

	return (ret_code, msg, perf_data)

################################################################################
#                               Configuration                                  #
################################################################################

checks = {
	'events' : {
		'api_path' : "/platform/7/event/eventlists",
		'function' : check_events,
	},

	'storagepools' : {
		'api_path' : "/platform/3/storagepool/nodepools",
		'function' : check_storagepools,
	},

	'synciq' : {
		'api_path' : '/platform/7/sync/policies',
		'function' : check_synciq,
	},
}

tls_cacert_dir = "/etc/ssl/certs"

################################################################################
#                         Parse command line argument                          #
################################################################################

parser = argparse.ArgumentParser ()

subparsers = parser.add_subparsers (dest = 'check', required = True, description = "Choose one item to check", title = "Checks")

# Check for events/alerts
parser_events = subparsers.add_parser ('events', help = 'Check events')

# Check storage pools
parser_stpl = subparsers.add_parser ('storagepools', help = 'Check storagepools')
parser_stpl.add_argument ('--ignore-unprovisioned', action = 'store_true', help = "Ignore unprovisioned pools instead reporting them with 0 values.")

# Check SyncIQ status
parser_siq = subparsers.add_parser ('synciq', help = 'Check SyncIQ')

# Arguments for all checks
parser.add_argument ('fqdn',     help = "FQDN of Isilon PAPI endpoint")
parser.add_argument ('username', help = "Username for PAPI login")
parser.add_argument ('password', help = "Password for PAPI login")

args = parser.parse_args ()


# Format URL and prepare auth data
url = "https://%s:8080/%s" % (args.fqdn, checks[args.check]['api_path'].lstrip ('/'))
auth = (args.username, args.password)
data = query_api (url, auth)

# Run check
(ret_code, msg, perf_data) = checks[args.check]['function'] (data)

if ret_code == OK:
	msg = "OK: " + msg
if ret_code == WARNING:
	msg = "Warning: " + msg
if ret_code == CRITICAL:
	msg = "Critical: " + msg
if ret_code == UNKNOWN:
	msg = "Unknown: " + msg

if perf_data:
	msg += "| " + " ".join (sorted (perf_data))

print (msg.rstrip ())
sys.exit (ret_code)
